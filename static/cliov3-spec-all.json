{
  "openapi": "3.1.0",
  "info": {
    "title": "Firefly APIs",
    "summary": "Inference APIs summary",
    "description": "Inference APIs description",
    "termsOfService": "Firefly Terms Of Service",
    "contact": {
      "name": "Adobe Firefly",
      "url": "https://www.adobe.com",
      "email": "rosca@adobe.com"
    },
    "license": {
      "name": "Adobe license",
      "url": "https://www.adobe.com"
    },
    "version": "1.0.0"
  },
  "servers": [
    {
      "url": "https://firefly-api-enterprise-stage.adobe.io",
      "description": "Stage endpoint"
    }
  ],
  "paths": {
    "/v3/images/generate": {
      "post": {
        "tags": [
          "v3"
        ],
        "summary": "/V3/Images/Generate",
        "operationId": "generateImagesV3",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GenerateImagesRequestV3"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenerateImagesResponseV3"
                }
              }
            }
          },
          "503": {
            "description": "Service Unavailable",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                },
                "examples": {
                  "model_not_loaded": {
                    "value": {
                      "error_code": "model_not_loaded"
                    }
                  }
                }
              }
            }
          },
          "501": {
            "description": "Not Implemented",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                },
                "examples": {
                  "not_implemented": {
                    "value": {
                      "error_code": "not_implemented"
                    }
                  }
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                },
                "examples": {
                  "validation_error": {
                    "value": {
                      "error_code": "validation_error",
                      "validation_errors": [
                        {
                          "loc": [
                            "body",
                            "contentClass"
                          ],
                          "msg": "value is not a valid enumeration member; permitted: 'photo', 'art'",
                          "type": "type_error.enum",
                          "ctx": {
                            "enum_values": [
                              "photo",
                              "art"
                            ]
                          }
                        }
                      ]
                    }
                  },
                  "prompt_unsafe": {
                    "value": {
                      "error_code": "prompt_unsafe"
                    }
                  },
                  "input_media_unsafe": {
                    "value": {
                      "error_code": "input_media_unsafe"
                    }
                  },
                  "output_media_unsafe": {
                    "value": {
                      "error_code": "output_media_unsafe"
                    }
                  },
                  "language_not_supported": {
                    "value": {
                      "error_code": "language_not_supported"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                },
                "examples": {
                  "runtime_error": {
                    "value": {
                      "error_code": "runtime_error"
                    }
                  }
                }
              }
            }
          },
          "408": {
            "description": "Request Timeout",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                },
                "examples": {
                  "timeout_error": {
                    "value": {
                      "error_code": "timeout_error"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                },
                "examples": {
                  "bad_request": {
                    "value": {
                      "error_code": "bad_request"
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                },
                "examples": {
                  "access_error": {
                    "value": {
                      "error_code": "access_error"
                    }
                  }
                }
              }
            }
          },
          "415": {
            "description": "Unsupported Media Type",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                },
                "examples": {
                  "invalid_content_type": {
                    "value": {
                      "error_code": "invalid_content_type"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v3/images/generate-similar": {
      "post": {
        "tags": [
          "v3"
        ],
        "summary": "/V3/Images/Generate-Similar",
        "operationId": "generateSimilarImagesV3",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GenerateSimilarImagesRequestV3"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenerateSimilarImagesResponseV3"
                }
              }
            }
          },
          "503": {
            "description": "Service Unavailable",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                },
                "examples": {
                  "model_not_loaded": {
                    "value": {
                      "error_code": "model_not_loaded"
                    }
                  }
                }
              }
            }
          },
          "501": {
            "description": "Not Implemented",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                },
                "examples": {
                  "not_implemented": {
                    "value": {
                      "error_code": "not_implemented"
                    }
                  }
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                },
                "examples": {
                  "validation_error": {
                    "value": {
                      "error_code": "validation_error",
                      "validation_errors": [
                        {
                          "loc": [
                            "body",
                            "contentClass"
                          ],
                          "msg": "value is not a valid enumeration member; permitted: 'photo', 'art'",
                          "type": "type_error.enum",
                          "ctx": {
                            "enum_values": [
                              "photo",
                              "art"
                            ]
                          }
                        }
                      ]
                    }
                  },
                  "prompt_unsafe": {
                    "value": {
                      "error_code": "prompt_unsafe"
                    }
                  },
                  "input_media_unsafe": {
                    "value": {
                      "error_code": "input_media_unsafe"
                    }
                  },
                  "output_media_unsafe": {
                    "value": {
                      "error_code": "output_media_unsafe"
                    }
                  },
                  "language_not_supported": {
                    "value": {
                      "error_code": "language_not_supported"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                },
                "examples": {
                  "runtime_error": {
                    "value": {
                      "error_code": "runtime_error"
                    }
                  }
                }
              }
            }
          },
          "408": {
            "description": "Request Timeout",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                },
                "examples": {
                  "timeout_error": {
                    "value": {
                      "error_code": "timeout_error"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                },
                "examples": {
                  "bad_request": {
                    "value": {
                      "error_code": "bad_request"
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                },
                "examples": {
                  "access_error": {
                    "value": {
                      "error_code": "access_error"
                    }
                  }
                }
              }
            }
          },
          "415": {
            "description": "Unsupported Media Type",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                },
                "examples": {
                  "invalid_content_type": {
                    "value": {
                      "error_code": "invalid_content_type"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v3/images/expand": {
      "post": {
        "tags": [
          "v3"
        ],
        "summary": "/V3/Images/Expand",
        "operationId": "expandImagesV3",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ExpandImageRequestV3"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExpandImageResponseV3"
                }
              }
            }
          },
          "503": {
            "description": "Service Unavailable",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                },
                "examples": {
                  "model_not_loaded": {
                    "value": {
                      "error_code": "model_not_loaded"
                    }
                  }
                }
              }
            }
          },
          "501": {
            "description": "Not Implemented",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                },
                "examples": {
                  "not_implemented": {
                    "value": {
                      "error_code": "not_implemented"
                    }
                  }
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                },
                "examples": {
                  "validation_error": {
                    "value": {
                      "error_code": "validation_error",
                      "validation_errors": [
                        {
                          "loc": [
                            "body",
                            "contentClass"
                          ],
                          "msg": "value is not a valid enumeration member; permitted: 'photo', 'art'",
                          "type": "type_error.enum",
                          "ctx": {
                            "enum_values": [
                              "photo",
                              "art"
                            ]
                          }
                        }
                      ]
                    }
                  },
                  "prompt_unsafe": {
                    "value": {
                      "error_code": "prompt_unsafe"
                    }
                  },
                  "input_media_unsafe": {
                    "value": {
                      "error_code": "input_media_unsafe"
                    }
                  },
                  "output_media_unsafe": {
                    "value": {
                      "error_code": "output_media_unsafe"
                    }
                  },
                  "language_not_supported": {
                    "value": {
                      "error_code": "language_not_supported"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                },
                "examples": {
                  "runtime_error": {
                    "value": {
                      "error_code": "runtime_error"
                    }
                  }
                }
              }
            }
          },
          "408": {
            "description": "Request Timeout",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                },
                "examples": {
                  "timeout_error": {
                    "value": {
                      "error_code": "timeout_error"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                },
                "examples": {
                  "bad_request": {
                    "value": {
                      "error_code": "bad_request"
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                },
                "examples": {
                  "access_error": {
                    "value": {
                      "error_code": "access_error"
                    }
                  }
                }
              }
            }
          },
          "415": {
            "description": "Unsupported Media Type",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                },
                "examples": {
                  "invalid_content_type": {
                    "value": {
                      "error_code": "invalid_content_type"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v3/images/fill": {
      "post": {
        "tags": [
          "v3"
        ],
        "summary": "/V3/Images/Fill",
        "operationId": "fillImagesV3",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/FillImageRequestV3"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FillImageResponseV3"
                }
              }
            }
          },
          "503": {
            "description": "Service Unavailable",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                },
                "examples": {
                  "model_not_loaded": {
                    "value": {
                      "error_code": "model_not_loaded"
                    }
                  }
                }
              }
            }
          },
          "501": {
            "description": "Not Implemented",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                },
                "examples": {
                  "not_implemented": {
                    "value": {
                      "error_code": "not_implemented"
                    }
                  }
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                },
                "examples": {
                  "validation_error": {
                    "value": {
                      "error_code": "validation_error",
                      "validation_errors": [
                        {
                          "loc": [
                            "body",
                            "contentClass"
                          ],
                          "msg": "value is not a valid enumeration member; permitted: 'photo', 'art'",
                          "type": "type_error.enum",
                          "ctx": {
                            "enum_values": [
                              "photo",
                              "art"
                            ]
                          }
                        }
                      ]
                    }
                  },
                  "prompt_unsafe": {
                    "value": {
                      "error_code": "prompt_unsafe"
                    }
                  },
                  "input_media_unsafe": {
                    "value": {
                      "error_code": "input_media_unsafe"
                    }
                  },
                  "output_media_unsafe": {
                    "value": {
                      "error_code": "output_media_unsafe"
                    }
                  },
                  "language_not_supported": {
                    "value": {
                      "error_code": "language_not_supported"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                },
                "examples": {
                  "runtime_error": {
                    "value": {
                      "error_code": "runtime_error"
                    }
                  }
                }
              }
            }
          },
          "408": {
            "description": "Request Timeout",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                },
                "examples": {
                  "timeout_error": {
                    "value": {
                      "error_code": "timeout_error"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                },
                "examples": {
                  "bad_request": {
                    "value": {
                      "error_code": "bad_request"
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                },
                "examples": {
                  "access_error": {
                    "value": {
                      "error_code": "access_error"
                    }
                  }
                }
              }
            }
          },
          "415": {
            "description": "Unsupported Media Type",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                },
                "examples": {
                  "invalid_content_type": {
                    "value": {
                      "error_code": "invalid_content_type"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v3/images/generate-object-composite": {
      "post": {
        "tags": [
          "v3"
        ],
        "summary": "/V3/Images/Generate-Object-Composite",
        "operationId": "generateObjectCompositeV3",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GenerateObjectCompositeRequestV3"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenerateObjectCompositeResponseV3"
                }
              }
            }
          },
          "503": {
            "description": "Service Unavailable",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                },
                "examples": {
                  "model_not_loaded": {
                    "value": {
                      "error_code": "model_not_loaded"
                    }
                  }
                }
              }
            }
          },
          "501": {
            "description": "Not Implemented",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                },
                "examples": {
                  "not_implemented": {
                    "value": {
                      "error_code": "not_implemented"
                    }
                  }
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                },
                "examples": {
                  "validation_error": {
                    "value": {
                      "error_code": "validation_error",
                      "validation_errors": [
                        {
                          "loc": [
                            "body",
                            "contentClass"
                          ],
                          "msg": "value is not a valid enumeration member; permitted: 'photo', 'art'",
                          "type": "type_error.enum",
                          "ctx": {
                            "enum_values": [
                              "photo",
                              "art"
                            ]
                          }
                        }
                      ]
                    }
                  },
                  "prompt_unsafe": {
                    "value": {
                      "error_code": "prompt_unsafe"
                    }
                  },
                  "input_media_unsafe": {
                    "value": {
                      "error_code": "input_media_unsafe"
                    }
                  },
                  "output_media_unsafe": {
                    "value": {
                      "error_code": "output_media_unsafe"
                    }
                  },
                  "language_not_supported": {
                    "value": {
                      "error_code": "language_not_supported"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                },
                "examples": {
                  "runtime_error": {
                    "value": {
                      "error_code": "runtime_error"
                    }
                  }
                }
              }
            }
          },
          "408": {
            "description": "Request Timeout",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                },
                "examples": {
                  "timeout_error": {
                    "value": {
                      "error_code": "timeout_error"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                },
                "examples": {
                  "bad_request": {
                    "value": {
                      "error_code": "bad_request"
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                },
                "examples": {
                  "access_error": {
                    "value": {
                      "error_code": "access_error"
                    }
                  }
                }
              }
            }
          },
          "415": {
            "description": "Unsupported Media Type",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                },
                "examples": {
                  "invalid_content_type": {
                    "value": {
                      "error_code": "invalid_content_type"
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "AlignmentHorizontal": {
        "enum": [
          "center",
          "left",
          "right"
        ],
        "title": "AlignmentHorizontal",
        "description": "An enumeration."
      },
      "AlignmentVertical": {
        "enum": [
          "center",
          "top",
          "bottom"
        ],
        "title": "AlignmentVertical",
        "description": "An enumeration."
      },
      "ApiError": {
        "properties": {
          "error_code": {
            "$ref": "#/components/schemas/ColligoErrorCode"
          },
          "message": {
            "type": "string",
            "title": "Message"
          },
          "validation_errors": {
            "items": {
              "$ref": "#/components/schemas/ValidationErrorMessage"
            },
            "type": "array",
            "title": "Validation Errors"
          }
        },
        "type": "object",
        "required": [
          "error_code"
        ],
        "title": "ApiError",
        "description": "The error within the error response."
      },
      "BaseInputImageV3": {
        "properties": {
          "source": {
            "allOf": [
              {
                "$ref": "#/components/schemas/PublicBinaryInputV3"
              }
            ],
            "title": "Source image",
            "description": "Source image which will be used to expand, fill or generate similar images, dimensions of image should not be greater than (4000px X 4000px)"
          }
        },
        "type": "object",
        "required": [
          "source"
        ],
        "title": "BaseInputImageV3"
      },
      "Body_expandImagesV3": {
        "properties": {
          "request": {
            "$ref": "#/components/schemas/ExpandImageRequestV3"
          },
          "files": {
            "items": {
              "type": "string",
              "format": "binary"
            },
            "type": "array",
            "title": "Files"
          }
        },
        "type": "object",
        "required": [
          "request",
          "files"
        ],
        "title": "Body_expandImagesV3"
      },
      "Body_fillImagesV3": {
        "properties": {
          "request": {
            "$ref": "#/components/schemas/FillImageRequestV3"
          },
          "files": {
            "items": {
              "type": "string",
              "format": "binary"
            },
            "type": "array",
            "title": "Files"
          }
        },
        "type": "object",
        "required": [
          "request",
          "files"
        ],
        "title": "Body_fillImagesV3"
      },
      "Body_generateImagesV3": {
        "properties": {
          "request": {
            "$ref": "#/components/schemas/GenerateImagesRequestV3"
          },
          "files": {
            "items": {
              "type": "string",
              "format": "binary"
            },
            "type": "array",
            "title": "Files"
          }
        },
        "type": "object",
        "required": [
          "request",
          "files"
        ],
        "title": "Body_generateImagesV3"
      },
      "Body_generateObjectCompositeV3": {
        "properties": {
          "request": {
            "$ref": "#/components/schemas/GenerateObjectCompositeRequestV3"
          },
          "files": {
            "items": {
              "type": "string",
              "format": "binary"
            },
            "type": "array",
            "title": "Files"
          }
        },
        "type": "object",
        "required": [
          "request",
          "files"
        ],
        "title": "Body_generateObjectCompositeV3"
      },
      "Body_generateSimilarImagesV3": {
        "properties": {
          "request": {
            "$ref": "#/components/schemas/GenerateSimilarImagesRequestV3"
          },
          "files": {
            "items": {
              "type": "string",
              "format": "binary"
            },
            "type": "array",
            "title": "Files"
          }
        },
        "type": "object",
        "required": [
          "request",
          "files"
        ],
        "title": "Body_generateSimilarImagesV3"
      },
      "ColligoErrorCode": {
        "type": "string",
        "enum": [
          "model_not_loaded",
          "not_implemented",
          "validation_error",
          "runtime_error",
          "timeout_error",
          "prompt_unsafe",
          "input_media_unsafe",
          "output_media_unsafe",
          "bad_request",
          "language_not_supported",
          "access_error",
          "invalid_content_type"
        ],
        "title": "ColligoErrorCode",
        "description": "An enumeration."
      },
      "ContentClassV3": {
        "type": "string",
        "enum": [
          "photo",
          "art"
        ],
        "title": "ContentClassV3",
        "description": "An enumeration."
      },
      "ExpandImageRequestV3": {
        "properties": {
          "numVariations": {
            "type": "integer",
            "maximum": 4,
            "minimum": 1,
            "title": "The number of variations",
            "description": "numVariations will default to the number of seeds, or to 1 if seeds is not specified."
          },
          "seeds": {
            "items": {
              "type": "integer"
            },
            "type": "array",
            "maxItems": 4,
            "minItems": 1,
            "uniqueItems": true,
            "title": "The seed of each variation",
            "description": "If specified alongside with numVariations, the number of seeds must be the equal to numVariations"
          },
          "size": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Size"
              }
            ],
            "title": "The size",
            "description": "The size of the requested generations",
            "default": {
              "width": 2048,
              "height": 2048
            }
          },
          "prompt": {
            "type": "string",
            "maxLength": 1024,
            "minLength": 1,
            "title": "The prompt",
            "description": "The prompt used to generate the image. The longer the prompt - the better"
          },
          "image": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ExpandInputImageV3"
              }
            ],
            "title": "Input Image",
            "description": "Image which we want to expand"
          },
          "placement": {
            "$ref": "#/components/schemas/Placement"
          }
        },
        "type": "object",
        "required": [
          "image"
        ],
        "title": "Images expand payload"
      },
      "ExpandImageResponseV3": {
        "properties": {
          "size": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Size"
              }
            ],
            "title": "The actual size used for the outputs",
            "description": "If size was passed as input, this value should be the same as the one passed as input."
          },
          "outputs": {
            "items": {
              "$ref": "#/components/schemas/OutputImageV3"
            },
            "type": "array",
            "minItems": 1,
            "title": "The list of images",
            "description": "Each image will have a storage item."
          }
        },
        "type": "object",
        "required": [
          "size",
          "outputs"
        ],
        "title": "Images expand response"
      },
      "ExpandInputImageV3": {
        "properties": {
          "source": {
            "allOf": [
              {
                "$ref": "#/components/schemas/PublicBinaryInputV3"
              }
            ],
            "title": "Source image",
            "description": "Source image which will be used to expand, fill or generate similar images, dimensions of image should not be greater than (4000px X 4000px)"
          },
          "mask": {
            "allOf": [
              {
                "$ref": "#/components/schemas/PublicBinaryInputV3"
              }
            ],
            "title": "Mask image",
            "description": "Mask image which will be used replace the backgound of the image"
          }
        },
        "type": "object",
        "required": [
          "source"
        ],
        "title": "ExpandInputImageV3"
      },
      "FillImageRequestV3": {
        "properties": {
          "numVariations": {
            "type": "integer",
            "maximum": 4,
            "minimum": 1,
            "title": "The number of variations",
            "description": "numVariations will default to the number of seeds, or to 1 if seeds is not specified."
          },
          "seeds": {
            "items": {
              "type": "integer"
            },
            "type": "array",
            "maxItems": 4,
            "minItems": 1,
            "uniqueItems": true,
            "title": "The seed of each variation",
            "description": "If specified alongside with numVariations, the number of seeds must be the equal to numVariations"
          },
          "size": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Size"
              }
            ],
            "title": "The size",
            "description": "The size of the requested generations",
            "default": {
              "width": 2048,
              "height": 2048
            }
          },
          "prompt": {
            "type": "string",
            "maxLength": 1024,
            "minLength": 1,
            "title": "The prompt",
            "description": "The prompt used to generate the image. The longer the prompt - the better"
          },
          "negativePrompt": {
            "type": "string",
            "maxLength": 1024,
            "title": "Avoid prompt",
            "description": "Inference will try to generate against this prompt"
          },
          "image": {
            "allOf": [
              {
                "$ref": "#/components/schemas/InputImageV3"
              }
            ],
            "title": "Input Image",
            "description": "Input image which we want to fill"
          },
          "promptBiasingLocaleCode": {
            "type": "string",
            "title": "The locale used for image generations",
            "description": "The locale will be used to generate content that is more relevant for user's country and language"
          }
        },
        "type": "object",
        "required": [
          "image"
        ],
        "title": "Fill images payload"
      },
      "FillImageResponseV3": {
        "properties": {
          "size": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Size"
              }
            ],
            "title": "The actual size used for the outputs",
            "description": "If size was passed as input, this value should be the same as the one passed as input."
          },
          "outputs": {
            "items": {
              "$ref": "#/components/schemas/OutputImageV3"
            },
            "type": "array",
            "minItems": 1,
            "title": "The list of images",
            "description": "Each image will have a storage item."
          }
        },
        "type": "object",
        "required": [
          "size",
          "outputs"
        ],
        "title": "Fill images response."
      },
      "GenerateImagesRequestV3": {
        "properties": {
          "numVariations": {
            "type": "integer",
            "maximum": 4,
            "minimum": 1,
            "title": "The number of variations",
            "description": "numVariations will default to the number of seeds, or to 1 if seeds is not specified."
          },
          "seeds": {
            "items": {
              "type": "integer"
            },
            "type": "array",
            "maxItems": 4,
            "minItems": 1,
            "uniqueItems": true,
            "title": "The seed of each variation",
            "description": "If specified alongside with numVariations, the number of seeds must be the equal to numVariations"
          },
          "size": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Size"
              }
            ],
            "title": "The size",
            "description": "The size of the requested generations",
            "default": {
              "width": 2048,
              "height": 2048
            }
          },
          "prompt": {
            "type": "string",
            "maxLength": 1024,
            "minLength": 1,
            "title": "The prompt",
            "description": "The prompt used to generate the image. The longer the prompt - the better"
          },
          "negativePrompt": {
            "type": "string",
            "maxLength": 1024,
            "title": "Avoid prompt",
            "description": "Inference will try to generate against this prompt"
          },
          "contentClass": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ContentClassV3"
              }
            ],
            "title": "The content class",
            "description": "Will guide the generation to being more photographic or more like art"
          },
          "visualIntensity": {
            "type": "integer",
            "maximum": 10,
            "minimum": 2,
            "title": "Visual Intensity",
            "description": "Adjusts the overall intensity of your photo's existing visual characteristic"
          },
          "style": {
            "allOf": [
              {
                "$ref": "#/components/schemas/StylesV3"
              }
            ],
            "title": "The styles to be used for image generation",
            "description": "You can specify a preset, a reference image or both"
          },
          "promptBiasingLocaleCode": {
            "type": "string",
            "title": "The locale used for image generations",
            "description": "The locale will be used to generate content that is more relevant for user's country and language"
          },
          "tileable": {
            "type": "boolean",
            "title": "If the output image should be tileable or not",
            "description": "Control to apply noise-rolling during diffusion (required for text2pattern, text2texture)"
          },
          "structure": {
            "allOf": [
              {
                "$ref": "#/components/schemas/StructureReferenceV3"
              }
            ],
            "title": "Structure Reference",
            "description": "Image which will be used for as a reference for structure to have a controlled generation"
          }
        },
        "type": "object",
        "required": [
          "prompt"
        ],
        "title": "Generating images from prompt"
      },
      "GenerateImagesResponseV3": {
        "properties": {
          "size": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Size"
              }
            ],
            "title": "The actual size used for the outputs",
            "description": "If size was passed as input, this value should be the same as the one passed as input."
          },
          "outputs": {
            "items": {
              "$ref": "#/components/schemas/OutputImageV3"
            },
            "type": "array",
            "minItems": 1,
            "title": "The list of images",
            "description": "Each image will have a storage item."
          },
          "promptHasDeniedWords": {
            "type": "boolean",
            "title": "The prompt had denied words",
            "description": "The user may see that the generation does not comply to its full prompt"
          },
          "promptHasBlockedArtists": {
            "type": "boolean",
            "title": "The prompt had artists that were blocked",
            "description": "The user may see that the generation does not comply to its full prompt"
          },
          "contentClass": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ContentClassV3"
              }
            ],
            "title": "The detected content class",
            "description": "Will be same as input, if input was specified"
          }
        },
        "type": "object",
        "required": [
          "size",
          "outputs"
        ],
        "title": "Generating images from prompt"
      },
      "GenerateObjectCompositeRequestV3": {
        "properties": {
          "numVariations": {
            "type": "integer",
            "maximum": 4,
            "minimum": 1,
            "title": "The number of variations",
            "description": "numVariations will default to the number of seeds, or to 1 if seeds is not specified."
          },
          "seeds": {
            "items": {
              "type": "integer"
            },
            "type": "array",
            "maxItems": 4,
            "minItems": 1,
            "uniqueItems": true,
            "title": "The seed of each variation",
            "description": "If specified alongside with numVariations, the number of seeds must be the equal to numVariations"
          },
          "size": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Size"
              }
            ],
            "title": "The size",
            "description": "The size of the requested generations",
            "default": {
              "width": 2048,
              "height": 2048
            }
          },
          "image": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ObjectCompositeInputImageV3"
              }
            ],
            "title": "Input Image",
            "description": "Input Image to create object composite"
          },
          "prompt": {
            "type": "string",
            "maxLength": 1024,
            "minLength": 1,
            "title": "The prompt",
            "description": "The prompt used to generate the image. The longer the prompt - the better"
          },
          "placement": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Placement"
              }
            ],
            "title": "Object placement",
            "description": "Determines placement of object in output image"
          },
          "style": {
            "allOf": [
              {
                "$ref": "#/components/schemas/StylesV3"
              }
            ],
            "title": "The styles to be used for image generation",
            "description": "You can specify a preset, a reference image or both"
          },
          "contentClass": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ContentClassV3"
              }
            ],
            "title": "The content class",
            "description": "Will guide the generation to being more photographic or more like art"
          }
        },
        "type": "object",
        "required": [
          "image",
          "prompt"
        ],
        "title": "Generate object composite from prompt request"
      },
      "GenerateObjectCompositeResponseV3": {
        "properties": {
          "size": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Size"
              }
            ],
            "title": "The actual size used for the outputs",
            "description": "If size was passed as input, this value should be the same as the one passed as input."
          },
          "outputs": {
            "items": {
              "$ref": "#/components/schemas/OutputImageV3"
            },
            "type": "array",
            "minItems": 1,
            "title": "The list of images",
            "description": "Each image will have a storage item."
          },
          "contentClass": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ContentClassV3"
              }
            ],
            "title": "The detected content class",
            "description": "Will be same as input, if input was specified"
          }
        },
        "type": "object",
        "required": [
          "size",
          "outputs"
        ],
        "title": "Generate object composite from prompt response"
      },
      "GenerateSimilarImagesRequestV3": {
        "properties": {
          "numVariations": {
            "type": "integer",
            "maximum": 4,
            "minimum": 1,
            "title": "The number of variations",
            "description": "numVariations will default to the number of seeds, or to 1 if seeds is not specified."
          },
          "seeds": {
            "items": {
              "type": "integer"
            },
            "type": "array",
            "maxItems": 4,
            "minItems": 1,
            "uniqueItems": true,
            "title": "The seed of each variation",
            "description": "If specified alongside with numVariations, the number of seeds must be the equal to numVariations"
          },
          "size": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Size"
              }
            ],
            "title": "The size",
            "description": "The size of the requested generations",
            "default": {
              "width": 2048,
              "height": 2048
            }
          },
          "image": {
            "allOf": [
              {
                "$ref": "#/components/schemas/BaseInputImageV3"
              }
            ],
            "title": "The reference image",
            "description": "Firefly will create similar variations"
          },
          "tileable": {
            "type": "boolean",
            "title": "Output image tileability",
            "description": "An image is tilable if it can be repeated infinitely in any direction without showing visible seams or edges."
          }
        },
        "type": "object",
        "required": [
          "image"
        ],
        "title": "Generating similar images from a reference image"
      },
      "GenerateSimilarImagesResponseV3": {
        "properties": {
          "size": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Size"
              }
            ],
            "title": "The actual size used for the outputs",
            "description": "If size was passed as input, this value should be the same as the one passed as input."
          },
          "outputs": {
            "items": {
              "$ref": "#/components/schemas/OutputImageV3"
            },
            "type": "array",
            "minItems": 1,
            "title": "The list of images",
            "description": "Each image will have a storage item."
          }
        },
        "type": "object",
        "required": [
          "size",
          "outputs"
        ],
        "title": "Generating similar images response"
      },
      "InputImageV3": {
        "properties": {
          "source": {
            "allOf": [
              {
                "$ref": "#/components/schemas/PublicBinaryInputV3"
              }
            ],
            "title": "Source image",
            "description": "Source image which will be used to expand, fill or generate similar images, dimensions of image should not be greater than (4000px X 4000px)"
          },
          "mask": {
            "allOf": [
              {
                "$ref": "#/components/schemas/PublicBinaryInputV3"
              }
            ],
            "title": "Mask image",
            "description": "Mask image which will be used replace the backgound of the image"
          }
        },
        "type": "object",
        "required": [
          "source",
          "mask"
        ],
        "title": "InputImageV3"
      },
      "ObjectCompositeInputImageV3": {
        "properties": {
          "source": {
            "allOf": [
              {
                "$ref": "#/components/schemas/PublicBinaryInputV3"
              }
            ],
            "title": "Source image",
            "description": "Source image which will be used to expand, fill or generate similar images, dimensions of image should not be greater than (4000px X 4000px)"
          },
          "mask": {
            "$ref": "#/components/schemas/PublicBinaryInputV3"
          }
        },
        "type": "object",
        "required": [
          "source"
        ],
        "title": "ObjectCompositeInputImageV3"
      },
      "OutputImageV3": {
        "properties": {
          "seed": {
            "type": "integer",
            "title": "The seed used for the generation",
            "description": "The seed description"
          },
          "image": {
            "allOf": [
              {
                "$ref": "#/components/schemas/PublicBinaryOutputV3"
              }
            ],
            "title": "The pre-signed URL used to download the image",
            "description": "The URL description"
          }
        },
        "type": "object",
        "required": [
          "seed",
          "image"
        ],
        "title": "OutputImageV3"
      },
      "Placement": {
        "properties": {
          "inset": {
            "allOf": [
              {
                "$ref": "#/components/schemas/PlacementInset"
              }
            ],
            "title": "Margin values in target size",
            "description": "Margin values in target size"
          },
          "alignment": {
            "allOf": [
              {
                "$ref": "#/components/schemas/PlacementAlignment"
              }
            ],
            "title": "Alignment",
            "description": "Specify horizontal and vertical alignment. For horizontal possible values are center or left or right. For vertical possible values are center or top or bottom."
          }
        },
        "type": "object",
        "title": "Placement"
      },
      "PlacementAlignment": {
        "properties": {
          "horizontal": {
            "allOf": [
              {
                "$ref": "#/components/schemas/AlignmentHorizontal"
              }
            ],
            "default": "center"
          },
          "vertical": {
            "allOf": [
              {
                "$ref": "#/components/schemas/AlignmentVertical"
              }
            ],
            "default": "center"
          }
        },
        "type": "object",
        "title": "PlacementAlignment"
      },
      "PlacementInset": {
        "properties": {
          "left": {
            "type": "integer",
            "title": "Left Inset",
            "description": "The space between left edge of the result image and left edge of the placed object image."
          },
          "top": {
            "type": "integer",
            "title": "Top Inset",
            "description": "The space between top edge of the result image and top edge of the placed object image."
          },
          "right": {
            "type": "integer",
            "title": "Right Inset",
            "description": "The space between right edge of the result image and right edge of the placed object image."
          },
          "bottom": {
            "type": "integer",
            "title": "Bottom Inset",
            "description": "The space between bottom edge of the result image and bottom edge of the placed object image."
          }
        },
        "type": "object",
        "title": "PlacementInset"
      },
      "PublicBinaryInputV3": {
        "properties": {
          "url": {
            "type": "string",
            "maxLength": 2083,
            "minLength": 1,
            "format": "uri",
            "title": "The presigned url",
            "description": "This URL of an uploaded image"
          },
          "uploadId": {
            "type": "string",
            "format": "uuid4",
            "title": "UUID of the uploaded object",
            "description": "UUID of the uploaded object"
          }
        },
        "type": "object",
        "title": "PublicBinaryInputV3"
      },
      "PublicBinaryOutputV3": {
        "properties": {
          "url": {
            "type": "string",
            "maxLength": 2083,
            "minLength": 1,
            "format": "uri",
            "title": "The presigned url",
            "description": "This URL will expire in one hour"
          }
        },
        "type": "object",
        "title": "PublicBinaryOutputV3"
      },
      "Size": {
        "properties": {
          "width": {
            "type": "integer",
            "maximum": 2688,
            "minimum": 1,
            "title": "The width of the output image"
          },
          "height": {
            "type": "integer",
            "maximum": 2688,
            "minimum": 1,
            "title": "The height of the output image"
          }
        },
        "type": "object",
        "required": [
          "width",
          "height"
        ],
        "title": "Size"
      },
      "StructureImageReferenceV3": {
        "properties": {
          "source": {
            "$ref": "#/components/schemas/PublicBinaryInputV3"
          }
        },
        "type": "object",
        "title": "StructureImageReferenceV3"
      },
      "StructureReferenceV3": {
        "properties": {
          "strength": {
            "type": "integer",
            "maximum": 100,
            "minimum": 0,
            "title": "Adherence Threshold",
            "description": "Adjusts adherence to structure reference image. 0 means no adherence. 100 means full adherence."
          },
          "imageReference": {
            "allOf": [
              {
                "$ref": "#/components/schemas/StructureImageReferenceV3"
              }
            ],
            "title": "A structure reference image",
            "description": "Firefly will detect the structure in the image and apply the same in the generated image"
          }
        },
        "type": "object",
        "title": "StructureReferenceV3"
      },
      "StylesImageReferenceV3": {
        "properties": {
          "source": {
            "$ref": "#/components/schemas/PublicBinaryInputV3"
          }
        },
        "type": "object",
        "title": "StylesImageReferenceV3"
      },
      "StylesV3": {
        "properties": {
          "presets": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "uniqueItems": true,
            "title": "The style presets",
            "description": "You can specify an ID for a style"
          },
          "strength": {
            "type": "integer",
            "maximum": 100,
            "exclusiveMinimum": 0,
            "title": "The strength of the style",
            "description": "The strength of the style"
          },
          "imageReference": {
            "allOf": [
              {
                "$ref": "#/components/schemas/StylesImageReferenceV3"
              }
            ],
            "title": "A style image reference",
            "description": "Firefly will detect the style in the image and apply the same style in the generated image"
          }
        },
        "type": "object",
        "title": "StylesV3"
      },
      "ValidationErrorMessage": {
        "properties": {
          "loc": {
            "items": {
              "anyOf": [
                {
                  "type": "integer"
                },
                {
                  "type": "string"
                }
              ]
            },
            "type": "array",
            "title": "Loc"
          },
          "msg": {
            "type": "string",
            "title": "Msg"
          },
          "type": {
            "type": "string",
            "title": "Type"
          },
          "ctx": {
            "type": "object",
            "title": "Ctx"
          }
        },
        "type": "object",
        "required": [
          "loc",
          "msg",
          "type"
        ],
        "title": "ValidationErrorMessage"
      }
    },
    "securitySchemes": {
      "Authorization": {
        "type": "http",
        "in": "header",
        "scheme": "bearer",
        "bearerFormat": "JWT",
        "name": "Authorization"
      },
      "X-Api-Key": {
        "type": "apiKey",
        "in": "header",
        "name": "x-api-key"
      }
    }
  },
  "tags": [
    {
      "name": "v3",
      "description": "APIs exposed in the V3 family of Firefly APIs"
    }
  ],
  "security": [
    {
      "Authorization": [],
      "X-Api-Key": []
    }
  ]
}